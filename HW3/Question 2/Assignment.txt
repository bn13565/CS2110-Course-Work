Consider the following problem. You're working for a large company with millions of customers, and have been asked to maintain a queue of customers seeking assistance. Note that some customers in the 'queue' may well get fed up waiting, so might choose to leave the 'queue' (even if not at the front), perhaps rejoining the 'queue' (at the back of course) at some later time. It turns out that some of your colleagues frequently want to be able to see who's currently in the queue, but either want to see quickly if a particular customer is there, or want a list of all queued customers sorted by name. Devise a data structure to handle this scenario efficiently, and write a program to show this in action. Your program should demonstrate its prowess by being able to read in data from a file (with your program allowing the naming of a file from which to read in data; the data would be in the format of strings separated by spaces and/or line breaks, each 'name' being just one string of letters without internal spaces). Explain how your program works, why you chose the data structure(s) you did, and make comparisons with other data structures or combinations of data structures which could have been employed. You should treat the customer data as if it were quite extensive for each customer (so have a customer object with attributes, some of which could be quite large) even if in reality much of your computation refers only to the name information or some other customer identifier. (For this question, please only use data structures that you actually build, eg don't use the Java API queues, lists, trees, arraylists, etc.. Likewise, you should write any methods you need (ie don't simply use a sorting method from the Java API).)
